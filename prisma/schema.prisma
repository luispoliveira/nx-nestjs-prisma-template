// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator nestgraphql {
  provider               = "node node_modules/prisma-nestjs-graphql"
  output                 = "../prisma/__generated__/prisma-nestjs-graphql"
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
  reExport               = All
  purgeOutput            = true
  emitSingle             = true
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./__generated__/ERD.svg"
}

model User {
  id                     Int       @id @default(autoincrement())
  email                  String    @unique
  /// @HideField({input:false, output: true})
  password               String?
  /// @HideField({input:true, output: false})
  isActive               Boolean   @default(false)
  /// @HideField({input:true, output: true})
  activationToken        String?   @unique
  /// @HideField({input:true, output: true})
  activationTokenExpires DateTime?
  /// @HideField({input:true, output: true})
  resetPasswordToken     String?   @unique
  /// @HideField({input:true, output: true})
  resetPasswordExpires   DateTime?
  /// @HideField({input:true, output: false})
  lastLogin              DateTime?
  /// @HideField({input:true, output: true})
  twoFA                  Boolean   @default(false)
  /// @HideField({input:true, output: true})
  twoFAPhone             String?
  /// @HideField({input:true, output: false})
  twoFAPhoneVerified     Boolean   @default(false)

  /// @HideField({input:true, output: false})
  createdAt     DateTime  @default(now())
  /// @HideField({input:true, output: false})
  updatedAt     DateTime  @updatedAt
  /// @HideField({input:true, output: false})
  createdBy     String?
  /// @HideField({input:true, output: false})
  updatedBy     String?
  /// @HideField({input:true, output: false})
  activatedAt   DateTime?
  /// @HideField({input:true, output: false})
  deactivatedAt DateTime?

  /// @HideField({input:true, output: false})
  Roles2Users       Roles2Users[]
  /// @HideField({input:true, output: false})
  Permissions2Users Permissions2Users[]
  /// @HideField({input:true, output: false})
  User2Apps         User2App[]
  /// @HideField({input:true, output: false})
  Profile           Profile?
  /// @HideField({input:true, output: true})
  Otps              Otp[]

  @@map("user")
}

enum OtpUseCase {
  LOGIN
  D2FA
  PHV
}

model Otp {
  id      Int        @id @default(autoincrement())
  user    User       @relation(fields: [userId], references: [id])
  userId  Int
  code    String
  useCase OtpUseCase

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime

  @@map("otp")
}

model Role {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  isActive Boolean @default(true)

  /// @HideField({input:true, output: false})
  createdAt DateTime @default(now())
  /// @HideField({input:true, output: false})
  updatedAt DateTime @updatedAt
  /// @HideField({input:true, output: false})
  createdBy String?
  /// @HideField({input:true, output: false})
  updatedBy String?

  /// @HideField({input:true, output: false})
  Roles2Users       Roles2Users[]
  /// @HideField({input:true, output: false})
  Permissions2Roles Permissions2Roles[]

  @@map("role")
}

model Permission {
  id     Int    @id @default(autoincrement())
  name   String @unique
  module String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?

  Permissions2Users Permissions2Users[]
  Permissions2Roles Permissions2Roles[]

  @@map("permission")
}

model Roles2Users {
  id       Int     @id @default(autoincrement())
  role     Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId   Int
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  isActive Boolean @default(true)

  /// @HideField({input:true, output: false})
  createdAt DateTime @default(now())
  /// @HideField({input:true, output: false})
  updatedAt DateTime @updatedAt
  /// @HideField({input:true, output: false})
  createdBy String?
  /// @HideField({input:true, output: false})
  updatedBy String?

  @@unique([userId, roleId])
  @@map("role_2_user")
}

model Permissions2Users {
  id           Int        @id @default(autoincrement())
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId Int
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  isActive     Boolean    @default(true)

  /// @HideField({input:true, output: false})
  createdAt DateTime @default(now())
  /// @HideField({input:true, output: false})
  updatedAt DateTime @updatedAt
  /// @HideField({input:true, output: false})
  createdBy String?
  /// @HideField({input:true, output: false})
  updatedBy String?

  @@unique([userId, permissionId])
  @@map("permission_2_user")
}

model Permissions2Roles {
  id           Int        @id @default(autoincrement())
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       Int
  isActive     Boolean    @default(true)

  /// @HideField({input:true, output: false})
  createdAt DateTime @default(now())
  /// @HideField({input:true, output: false})
  updatedAt DateTime @updatedAt
  /// @HideField({input:true, output: false})
  createdBy String?
  /// @HideField({input:true, output: false})
  updatedBy String?

  @@unique([roleId, permissionId])
  @@map("permission_2_role")
}

model ApiKey {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  key         String   @unique
  isActive    Boolean  @default(true)
  expiresAt   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ApiKey2Apps ApiKey2App[]

  @@map("api_key")
}

model App {
  id   Int    @id @default(autoincrement())
  name String @unique

  /// @HideField({input:true, output: false})
  createdAt DateTime @default(now())
  /// @HideField({input:true, output: false})
  updatedAt DateTime @updatedAt

  /// @HideField({input:true, output: false})
  User2Apps   User2App[]
  /// @HideField({input:true, output: false})
  ApiKey2Apps ApiKey2App[]

  @@map("app")
}

model User2App {
  id       Int     @id @default(autoincrement())
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  app      App     @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId    Int
  isActive Boolean @default(true)

  /// @HideField({input:true, output: false})
  createdAt DateTime @default(now())
  /// @HideField({input:true, output: false})
  updatedAt DateTime @updatedAt
  /// @HideField({input:true, output: false})
  createdBy String?
  /// @HideField({input:true, output: false})
  updatedBy String?

  @@unique([userId, appId])
  @@map("user_2_app")
}

model ApiKey2App {
  id       Int     @id @default(autoincrement())
  apiKey   ApiKey  @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  apiKeyId Int
  app      App     @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId    Int
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?

  @@unique([apiKeyId, appId])
  @@map("api_key_2_app")
}

model Log {
  id         Int      @id @default(autoincrement())
  userAgent  String?
  ip         String?
  method     String?
  headers    Json?
  url        String?
  body       Json?
  query      Json?
  params     Json?
  className  String?
  methodName String?
  username   String?
  response   Json?
  createdAt  DateTime @default(now())

  @@map("log")
}

model Profile {
  id        Int     @id @default(autoincrement())
  firstName String?
  lastName  String?
  phone     String?
  address   String?
  city      String?
  state     String?
  country   String?
  zip       String?
  /// @HideField({input:true, output: false})
  user      User    @relation(fields: [userId], references: [id])
  /// @HideField({input:true, output: false})
  userId    Int     @unique

  /// @HideField({input:true, output: false})
  createdAt DateTime @default(now())
  /// @HideField({input:true, output: false})
  updatedAt DateTime @updatedAt
  /// @HideField({input:true, output: false})
  createdBy String?
  /// @HideField({input:true, output: false})
  updatedBy String?

  @@map("profile")
}
